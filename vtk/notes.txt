'''Example'''
{|style="border-top:1px solid black" cellpadding="2" width="100%" align="left"
|-
|style="vertical-align:top" width="50%" |

|style="vertical-align:top"|
<imgc>url=https://raw.githubusercontent.com/rweigel/cds301/master/vtk/|width=400px|display=none|expire=1</imgc>
|}



== Polygonal Data ==

The polygonal dataset consists of arbitrary combinations of surface graphics primitives vertices (and polyvertices), lines (and polylines), polygons (of various types), and triangle strips. Polygonal data is defined by the POINTS VERTICES, LINES, POLYGONS, or TRIANGLE_STRIPS sections. The POINTS definition is the same as we saw for structured grid datasets. The VERTICES, LINES, POLYGONS, or TRIANGLE_STRIPS keywords define the polygonal dataset topology. Each of these keywords requires two parameters: the number of cells n and the size of the cell list size. The cell list size is the total number of integer values required to represent the list (i.e., sum of numPoints and connectivity indices over each cell). None of the keywords VERTICES, LINES, POLYGONS, or TRIANGLE_STRIPS is required.

A polydata such as Figure 3.9 is a specialized version of an unstructured grid designed for efficient rendering. It consists of 0D cells (vertices and polyvertices), 1D cells (lines and polylines) and 2D cells (polygons and triangle strips). Certain filters that generate only these cell types will generate a polydata. Examples include the Contour and Slice filters. An unstructured grid, as long as it has only 2D cells supported by polydata, can be converted to a polydata using the Extract Surface filter. A polydata can be converted to an unstructured grid using Clean to Grid.

http://www.paraview.org/Wiki/File:ParaView_UG_Polydata.png

=== Polydata + Polygons ===

<pre>
DATASET POLYDATA POINTS n dataType 
p0x p0y p0z
p1x p1y p1z
...
p(n-1)x p(n-1)y p(n-1)z

POLYGONS n size
numPoints0, i0, j0, k0, ...
numPoints1, i1, j1, k1, ...
...
numPointsn-1, in-1, jn-1, kn-1, ...

Note that in the following example, if the POLOYGONS section was omitted, no wireframe or points can be drawn when the file is opened in ParaView.

The interpretation of the file is that there are four points (specified by x,y, and z values), and the values should be interpreted as floating point.

The line <code>4 0 1 2 3</code> means that each polygon is bounded by vertices.  The first vertex is labeled 0 and corresponds to the first point in the list of points.  The second vertex is labeled 1 and corresponds to the second point in the list of points, etc.

The polygon is drawn by connecting a line from point 0 (0.0, 0.0, 0.0) to point 1 (0.0, 1.0, 0.0) to point 2 (1.0, 1.0, 0.0) to point 3 (1.0, 0.0, 0.0).

<pre>
# vtk DataFile Version 3.0
Polydata + Polygons Example A
ASCII

DATASET POLYDATA
POINTS 4 float
0.0 0.0 0.0
0.0 1.0 0.0
1.0 1.0 0.0
1.0 0.0 0.0

POLYGONS 1 5
4 0 1 2 3    
</pre>

In the following example, the first polygon is created using the first four points as in the previous example.

The second polygon is drawn by connecting point 0 (0.0, 0.0, 0.0) to point 4 (0.0, 0.0, 1.0) to point 5 (0.0, 1.0, 1.0) to point 1 (0.0, 1.0, 0.0).

<pre>
# vtk DataFile Version 3.0
Polydata + Polygons Example B
ASCII
DATASET POLYDATA
POINTS 6 float
0.0 0.0 0.0
0.0 1.0 0.0
1.0 1.0 0.0
1.0 0.0 0.0
0.0 0.0 1.0
0.0 1.0 1.0

POLYGONS 2 10
4 0 1 2 3
4 0 4 5 1
</pre>

=== Points + Vertices ===

<pre>
DATASET POLYDATA POINTS n dataType 
p0x p0y p0z
p1x p1y p1z
...
p(n-1)x p(n-1)y p(n-1)z
 
VERTICES n size
numPoints0, i0, j0, k0, ...
numPoints1, i1, j1, k1, ...
...
numPointsn-1, in-1, jn-1, kn-1, ...
</pre>

Note that when this file is viewed in ParaView, the Wireframe and Surface With Edges options do not work.

Note that the number of cells = 3.  In this case a cell is a vertex.

<pre>
# vtk DataFile Version 3.0
PolydataVertices Example 1
ASCII
DATASET POLYDATA

POINTS 3 float
0.0 0.0 0.0
1.0 0.0 0.0
1.0 1.0 0.0

VERTICES 3 6
1 0
1 1
1 2
</pre>

=== Points + Lines ===

<pre>
DATASET POLYDATA POINTS n dataType 
p0x p0y p0z
p1x p1y p1z
...
p(n-1)x p(n-1)y p(n-1)z

LINES n size
numPoints0, i0, j0, k0, ...
numPoints1, i1, j1, k1, ...
...
numPointsn-1, in-1, jn-1, kn-1, ...
</pre>

Note that the number of cells = 2.  In this case a cell is a line.

<pre>
# vtk DataFile Version 3.0
vtk output
ASCII
DATASET POLYDATA

POINTS 3 float
0.0 0.0 0.0
1.0 0.0 0.0
1.0 1.0 0.0

LINES 2 6
2 0 1
2 0 2
</pre>

=== Points + Vertices + Lines ===

In the above three cases the each surface graphic primitive corresponded to a cell.

One can re-use the points to create combinations of surface graphics primitives.

Note that the number of cells = 5.

<pre>
# vtk DataFile Version 3.0
vtk output
ASCII

DATASET POLYDATA

POINTS 3 float
0.0 0.0 0.0
1.0 0.0 0.0
1.0 1.0 0.0

LINES 2 6
2 0 1
2 0 2

VERTICES 3 6
1 0
1 1
1 2
</pre>

=== Points + Triangle Strips ===

<pre>
DATASET POLYDATA POINTS n dataType 
p0x p0y p0z
p1x p1y p1z
...
p(n-1)x p(n-1)y p(n-1)z

TRIANGLE_STRIPS n size
numPoints0, i0, j0, k0, ...
numPoints1, i1, j1, k1, ...
...
numPointsn-1, in-1, jn-1, kn-1, ...

== Unstructured Grid ==

=== Polyline ===
<pre>
# vtk DataFile Version 3.0
vtk output
ASCII
DATASET UNSTRUCTURED_GRID

POINTS 5 float
0.0 0.0 0.0
0.0 1.0 0.0
2.0 0.0 0.0
2.0 1.0 0.0
3.0 0.0 0.0

CELLS 1 6
5 0 1 2 3 4

CELL_TYPES 1
4
</pre>

=== Polygon ===
	
Note that the same set of points is used (and listed in the same order)

<pre>
# vtk DataFile Version 3.0
vtk output
ASCII
DATASET UNSTRUCTURED_GRID

POINTS 5 float
0.0 0.0 0.0
0.0 1.0 0.0
2.0 0.0 0.0
2.0 1.0 0.0
3.0 0.0 0.0

CELLS 1 6
5 0 2 4 3 1

CELL_TYPES 1
7
</pre>

=== Pyramid ===

== Field ==

Field data is a general format without topological and geometric structure, and without a particular dimensionality. Typically field data is associated with the points or cells of a dataset. However, if the FIELD type is specified as the dataset type (see Figure 1), then a general VTK data object is defined. Use the format described in the next section to define a field. Also see “Working With Field Data” on page 158 and the fourth example in this chapter “Exam- ples” on page 7.

See http://www.paraview.org/Bug/view.php?id=5887

<pre>
# vtk DataFile Version 2.0
Field data example
ASCII
FIELD speed 2

TIME 1 5 float
0.0 1.0 2.0 3.0 4.0

SPEED 1 5 float
10.0 11.0 8.0 12.0 13.0
</pre>

= Dataset Attributes =

Each part of a dataset (points and cells) may have an associated color lookup table, scalar, vector, normal, tensor, texture, and field.

== POINT_DATA ==


== CELL_DATA ==

= Activities =

== ParaView Tutorial ==

# Select <code>Application->System Tools->Terminal</code> and type <code>/usr/local/paraview/bin/paraview &</code>
# Download the tutorial data at http://www.paraview.org/Wiki/images/5/58/ParaViewTutorialData.zip and save on your desktop.  Double-click the zip file and extract to your desktop.  If successful, you should see a blue folder on your desktop with the title <code>ParaViewTutorialData</code>.
# Work through the activities in chapter 2 of [http://www.paraview.org/Wiki/images/5/5d/ParaViewTutorial41.pdf]
